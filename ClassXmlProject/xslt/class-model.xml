<!--This DTD document allows to design classes throw UML modelisation-->
<!--  Version 1.2 -->
<!-- Predefined entities -->
<!ENTITY % display "display (yes | no) #IMPLIED" >
<!ENTITY % range "public | private | protected" >
<!ENTITY % modifier "modifier (var | const) #REQUIRED" >
<!ENTITY % by "by (val|ref) #REQUIRED" >
<!ENTITY % level "level (0 | 1 | 2) #REQUIRED" >
<!ENTITY % implementation "implementation (simple | final | virtual | root | abstract) #REQUIRED" >
<!ENTITY % cardinal "cardinal (0n | 1n | 1 | 01) #REQUIRED" >
<!ENTITY % name "NMTOKEN" >
<!ENTITY % type "CDATA" >
<!ENTITY % constructor "public | protected |private | no" >
<!ENTITY % declaration "type,variable,comment" >
<!ENTITY % num-id "num-id  CDATA #REQUIRED" >
<!ENTITY % id "id ID #REQUIRED" >
<!ENTITY % idref "idref IDREF #REQUIRED" >
<!ENTITY % list "((get,set)| list | array) " >
<!--Common comment-->
<!ELEMENT comment (#PCDATA) >
<!ATTLIST comment
          brief CDATA #IMPLIED>

<!--Common comment-->
<!ELEMENT return (%declaration;) >

<!--Variable generic type-->
<!ELEMENT typedef (%declaration;)>
<!ATTLIST typedef
          name %name; #REQUIRED
          %display;
          %id; >

<!--Enumerate value-->
<!ELEMENT enumvalue (#PCDATA)>
<!ATTLIST enumvalue
          %id;
          name %name; #REQUIRED
          value CDATA #IMPLIED>

<!--Structure element-->
<!ELEMENT element (#PCDATA)>
<!ATTLIST element
          %num-id;
          desc  %type; #IMPLIED
          idref IDREF #IMPLIED
          %modifier;
          %level;
          sizeref IDREF #IMPLIED
          size CDATA #IMPLIED
          name %name; #REQUIRED>

<!--Variable type declaration-->
<!ELEMENT type (enumvalue*,element*,list?)>
<!ATTLIST type
          desc  %type; #IMPLIED
          idref IDREF #IMPLIED
          struct (struct|union|container) #IMPLIED
          %modifier;
          %level;
          %by; >

<!ELEMENT variable (#PCDATA)>
<!ATTLIST variable
          range (%range;) #REQUIRED
          value CDATA #IMPLIED
          sizeref IDREF #IMPLIED
          size CDATA #IMPLIED
          valref IDREF #IMPLIED>

<!--Method param declaration-->
<!ELEMENT param (%declaration;)>
<!ATTLIST param
          %num-id;
          %display;
          name %name; #REQUIRED>
          
<!ELEMENT exception EMPTY>
<!ATTLIST exception
         %display;
         %idref; >


<!--Method declaration-->
<!ELEMENT method (exception*,return?,comment,param*,inline?)>
<!ATTLIST method
          %display;
          %num-id;
          inline (yes | no) "no"
          modifier (var | const) "var"
          member (object | class) #REQUIRED
          constructor (%constructor;) #REQUIRED
          operator CDATA #IMPLIED
          behaviour CDATA #IMPLIED
          overrides IDREF #IMPLIED
          name %name; #IMPLIED
          %implementation; >

<!ELEMENT inline (body*)>

<!ELEMENT body (line*)>
<!ATTLIST body
          type (constructor | destructor | method | class | property) "method">

<!ELEMENT line EMPTY>
<!ATTLIST line
          value CDATA #REQUIRED>


<!--Property read access-->
<!ELEMENT get EMPTY>
<!ATTLIST get
          range (no|protected|public) #REQUIRED
          %by;
          %modifier;>

<!--Property write access-->
<!ELEMENT set EMPTY>
<!ATTLIST set
          range (no|protected|public) #REQUIRED
          %by; >

<!--Property declaration-->
<!ELEMENT property (%declaration;,get,set)>
<!ATTLIST property
           %display;
           %num-id;
           attribute (no|yes) "yes"
           overridable (no|yes) "no"
           overrides IDREF #IMPLIED
           behaviour CDATA #IMPLIED
           access-value CDATA #IMPLIED
           member (object | class) #REQUIRED
           name %name; #REQUIRED >

<!--Super-class implementation-->
<!ELEMENT import (export|body)? >
<!ATTLIST import
          %display;
          visibility (common | package) #REQUIRED
          param CDATA #IMPLIED
          name CDATA #REQUIRED>

<!ELEMENT export (reference|interface)* >
<!ATTLIST export
          %display;
          source CDATA #IMPLIED
          name CDATA #IMPLIED>

<!ELEMENT reference (collaboration*) >
<!ATTLIST reference
          %id;
          type (class|typedef|exception) #REQUIRED
          package NMTOKEN #IMPLIED
          class NMTOKEN #IMPLIED
          container CDATA #IMPLIED
          source CDATA #IMPLIED
          name %name; #REQUIRED>

<!ELEMENT interface (collaboration*,property*,method*) >
<!ATTLIST interface
          %id;
          root (no|yes) "no"
          package NMTOKEN #IMPLIED
          name %name; #REQUIRED>

<!ELEMENT inherited (#PCDATA) >
<!ATTLIST inherited
          range (%range;) #REQUIRED
          %idref;>

<!ELEMENT dependency EMPTY>
<!ATTLIST dependency
          action CDATA #REQUIRED
          %idref;
          type (interface|reference|body) #REQUIRED>

<!ELEMENT collaboration EMPTY>
<!ATTLIST collaboration
          %display;
          %idref;>

<!ELEMENT model (#PCDATA) >
<!ATTLIST model
          name %name; #REQUIRED
          %id;>

<!--Class declaration-->
<!ELEMENT class (model*, inherited*, dependency*, collaboration*, comment, import*, typedef*, property*, method*)>
<!ATTLIST class
          %id;
          name %name; #REQUIRED
		  %display;
          visibility (common | package) #REQUIRED
          implementation (simple | final | virtual | root | abstract | exception | container) #REQUIRED
          destructor   (%constructor;) #REQUIRED
          inline   (none | constructor | destructor | both) #REQUIRED
          constructor (%constructor;) #REQUIRED
          behaviour CDATA #IMPLIED>
          
<!--Relationship declaration-->
<!ELEMENT relationship (father,child)>
<!ATTLIST relationship
          %display;
          %id;
          action CDATA #REQUIRED
          type (comp|aggreg|assembl) #REQUIRED>

<!ELEMENT father %list; >
<!ATTLIST father
          name CDATA #REQUIRED
          range (%range; | no) #REQUIRED
          member (object | class) #IMPLIED
          %idref;
          %cardinal;
          %level; >
          
<!ELEMENT child %list; >
<!ATTLIST child
          name %name; #REQUIRED
          range (%range;) #REQUIRED
          member (object | class) #IMPLIED
          %idref;
          %cardinal;
          %level; >
          
<!ELEMENT list EMPTY>
<!ATTLIST list
          iterator (yes | no) #IMPLIED
          type (simple | indexed) #REQUIRED
          desc CDATA #IMPLIED
          idref IDREF #IMPLIED
          index-desc  %type; #IMPLIED
          index-idref IDREF #IMPLIED
          level (0 | 1 | 2) #IMPLIED >

<!ELEMENT array EMPTY>
<!ATTLIST array
          sizeref IDREF #IMPLIED
          size CDATA #IMPLIED>

<!--Package declaration-->
<!ELEMENT package (comment,import*,typedef*,class*,package*)>
<!ATTLIST package
          %display;
          %id;
          folder CDATA #IMPLIED
          name %name; "unique">
<!--Generation declaration : le type de langage dÃ©fini dans l'application"-->
<!-- 0 : Langage C++ 
      1 : VB .NET
      2 : Java/J2EE -->
<!ELEMENT generation EMPTY>
<!ATTLIST generation
          language (0 | 1 | 2 | 3) #REQUIRED
          destination CDATA #REQUIRED>

<!--Root element-->
<!ELEMENT root (generation,comment,import*,class*,package*,relationship*)>
<!ATTLIST root
		      version CDATA #FIXED "1.3"
          %display;
          name CDATA #REQUIRED>



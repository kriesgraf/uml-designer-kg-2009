#sidebar TableOfContents

= UML project data file structure =

We have choose [http://www.w3.org/XML/ XML] format for project data file to allow a loads of possible conversion, at least HTML display and source code generation.

For now the structure of the Xml document is declared in a Document Type Definition file (DTD), which current version is 1.2.

== Overview ===

Xml format offers a tree data structure that is useful to describe Uml project description.

http://uml-designer-kg-2009.googlecode.com/svn/trunk/Software%20design/ClassXmlProject/UML%20project%20data%20file%20main%20structure.PNG
 * First *root* node is the base of the Xml tree, attributes declare info about project file.
 * First children nodes *generation* and *comment* are associated to node *root* and describe code generation language and repository, and the last more detailed info about project.
 * Following nodes *import*, *class*, *package* and *relationship* can have a cardinal of 0..n according to the project description. Each nodes is detailed in a specific paragraph.

== Xml "import" node structure ==

http://uml-designer-kg-2009.googlecode.com/svn/trunk/Software%20design/ClassXmlProject/UML%20project%20data%20file%20import%20node%20structure.PNG

 * To be continue...

== Xml "class" node structure ==

To simplify the *class* node describes both the module that will be generated and the element of the project design. Some language allow to declare several types and classes in a same module, we have decided to choose the Java declaration: one _class = one module_.

http://uml-designer-kg-2009.googlecode.com/svn/trunk/Software%20design/ClassXmlProject/UML%20project%20data%20file%20class%20node%20structure.PNG

 * Attributes *constructor* and *destructor* are declared according to the code generation language and user choice.
 * Attributes *implementation* declares this class as an interface, a simple and independant class, or is the root, node or leaf of a huge inheritance tree.
 * Attributes *inline* used at origin to save body of C++ inline constructor & destructor will protect in a future version the body of this special methods. 
 * Attributes *comment* is used to declare comment for Doxygen, Visual Studio comment tools or javadoc (or other in future). 
 * Following nodes *inherited*, *dependency*, *collaboration*, *import*, *typedef*, *property* and *method* can have a cardinal of 0..n according to the project description. Each nodes is detailed in a specific paragraph.

== Xml "package" node structure ==

http://uml-designer-kg-2009.googlecode.com/svn/trunk/Software%20design/ClassXmlProject/UML%20project%20data%20file%20package%20node%20structure.PNG

 * Attributes *folder* declares relative path from project repository (see *generation* node) where class source code will be generated. 
 * Attributes *comment* is used to declare comment for Doxygen, Visual Studio comment tools or javadoc (or other in future). 
 * Following nodes *import*, *class*, *package* can have a cardinal of 0..n according to the project description. Each nodes is detailed in a specific paragraph.

== Xml "property" node structure ==

http://uml-designer-kg-2009.googlecode.com/svn/trunk/Software%20design/ClassXmlProject/UML%20project%20data%20file%20property%20node%20structure.PNG

 * To be continue...


== Xml "method" node structure ==

http://uml-designer-kg-2009.googlecode.com/svn/trunk/Software%20design/ClassXmlProject/UML%20project%20data%20file%20method%20node%20structure.PNG

 * To be continue...



To be continue...
#labels Phase-Design
#sidebar TableOfContents
<h2>Content:</h2>
<wiki:toc max_depth="2" />

= UML project data file structure =

We have choose [http://www.w3.org/XML/ XML] format for project data file to allow a loads of possible conversion, at least HTML display and source code generation.

For now the structure of the Xml document is declared in a Document Type Definition file (DTD), which current version is 1.2.

== Overview ===

Xml format offers a tree data structure that is useful to describe Uml project description.

http://uml-designer-kg-2009.googlecode.com/svn/trunk/Software%20design/ClassXmlProject/UML%20project%20data%20file%20main%20structure.PNG
 * First *root* node is the base of the Xml tree, attributes declare info about project file.
 * Attribute *name*: is the name of the project, but this could be used as _root namespace_ and also should observe language code syntax.
 * Attribute *version*: is fixed at project file creation, but could be upgraded when a _patch_ is apply.
 * First children nodes *generation* and *comment* are associated to node *root* and describe code generation language and repository, and the last more detailed info about project.
 * Following nodes *import*, *class*, *package* and *relationship* can have a cardinal of 0..n according to the project description. Each nodes is detailed in a specific paragraph.

== Xml "import" node structure ==

To simplify the *import* node describes both an external interface or a component.

http://uml-designer-kg-2009.googlecode.com/svn/trunk/Software%20design/ClassXmlProject/UML%20project%20data%20file%20import%20node%20structure.PNG

 * Attributes *visibility* allows to share declaration between all packages or not, values: _package/common_.
 * *params* could remain empty when attribute *name* is comprehensive. This is generaly a _full path_ declaration that is inserted in source code. See example in _code generation_ chapter in this manual. 
 * To be continue...

== Xml "class" node structure ==

To simplify the *class* node describes both the module that will be generated and the element of the project design. Some language allow to declare several types and classes in a same module, we have decided to choose the Java declaration: one _class = one module_.

http://uml-designer-kg-2009.googlecode.com/svn/trunk/Software%20design/ClassXmlProject/UML%20project%20data%20file%20class%20node%20structure.PNG

 * Attributes *constructor* and *destructor* are declared according to the code generation language and user choice.
 * Attributes *implementation* declares this class as an _interface_, a _simple_ and independant class, or is the _root_, _node_ or _leaf_ of a huge inheritance tree.
 * Attributes *comment* is used to declare comment for Doxygen, Visual Studio comment tools or javadoc (or other in future). 
 * Following nodes *inherited*, *dependency*, *collaboration*, *import*, *typedef*, *property* and *method* can have a cardinal of 0..n according to the project description. Each nodes is detailed in a specific paragraph.

== Xml "package" node structure ==

http://uml-designer-kg-2009.googlecode.com/svn/trunk/Software%20design/ClassXmlProject/UML%20project%20data%20file%20package%20node%20structure.PNG

 * Attributes *folder* declares relative path from project repository (see *generation* node) where class source code will be generated. 
 * Attributes *comment* is used to declare comment for Doxygen, Visual Studio comment tools or javadoc (or other in future). 
 * Following nodes *import*, *class*, *package* can have a cardinal of 0..n according to the project description. Each nodes is detailed in a specific paragraph.

== Xml "property" node structure ==

http://uml-designer-kg-2009.googlecode.com/svn/trunk/Software%20design/ClassXmlProject/UML%20project%20data%20file%20property%20node%20structure.PNG

 * Attributes *member* declares the property, member of _class_ (static/shared variable) or _object_ (simple variable). 
 * Nodes *type* and *variable* are described further.
 * Node *get* declares _getter_ and its visibility: _range_ (public/protected), its return value type: _modifier_ (const/var), _by_ (reference, value).
 * Node *set* declares _setter_ and its visibility: _range_ (public/protected), its argument value type: _by_ (reference, value).

We provided 3 more optional attributes:
 * *behaviour*: used at least in Visual Basic,
 * *overridable*: _yes/no_, future use to allow overriding accessors in a derived class.
 * *overrides*: *num-id* attribute of the overridden property in base class.

== Xml "method" node structure ==

http://uml-designer-kg-2009.googlecode.com/svn/trunk/Software%20design/ClassXmlProject/UML%20project%20data%20file%20method%20node%20structure.PNG

 * To be continue...



To be continue...